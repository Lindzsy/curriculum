* General
- Plan should be in place by 2nd Week of Dec
- Begins First(ish) week of Feb, lasts 4 mo
* Emails
- https://mail.google.com/mail/u/0/#all/1509609751bf3bb0
- https://mail.google.com/mail/u/0/#all/150af31cde0b6e77 Curriculum topics
* Big goal(ish) [0/3]
- [ ] Put this on an organization for code platoon
- [ ] Finish prework
- [ ] Finish high-level for curriculum
* Potential Resources
- GradeTrain
  - https://www.gradetrain.com/
- Codecademy
- [[http://ankisrs.net/][Anki]]
- [[https://github.com/JoshCheek/ruby-kickstart/tree/master/session1][RKS]] (also has lots of challenges)

* Curriculum
Split into 3 main sections, with some amount of overlap between each section,
as we choose appropriate ways to end a third which prepare them for the next one.

** To Add
- Sprinkle challenges liberally throughout
- Concrete demonstrations of knowledge each day
- Reflection opportunities
- Opportunities to go back and redo challenges they did previously (anchor the knowledge)

** References
- [[https://github.com/turingschool/today][Turing's curriculum]]
- [[https://github.com/turingschool/lesson_plans/tree/master/ruby_01-object_oriented_programming_with_ruby][Some of Turing's lesson plans]]
- [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/cohort_schedules/C03_classroom.md][Ada Academy's curriculum]]

** (1/3) Environment, Ruby, Problem Solving, Good Habits
- Maybe add ::
  - More git
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/how-to-os-x.md][How to OSX]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/nix.md][Intro to Unix]]
  - [[http://computers.tutsplus.com/tutorials/navigating-the-terminal-a-gentle-introduction--mac-3855][Navigating the Terminal: A Gentle Introduction]]
  - Enumerables
  - [[https://vimeo.com/130811302][Various Games]]
*** Week  1 - Intro to Editor, Ruby, Terminal
- Set expectations
  - positive behaviour
  - collaboration
  - grit
- Get to know each other
  - Become familiar with editor (What editor do we want to use? Probably Atom or Emacs, might depend on dev env, eg are we doing cloud based?)
    - Practice the mechanical skills of, making files, deleting them, editing them
    - Learn first Keybindings
    - Alternate between solving problems using [[https://github.com/JoshCheek/seeing_is_believing][SiB]] and practicing keybindings / editing
    - Demonstrate that you can perform these tasks
- Set up the terminal
  - Some stuff from my [[https://github.com/JoshCheek/1508/blob/master/initial-setup.md][setup instructions]] and probably [[https://github.com/JoshCheek/dotfiles-for-students][dotfiles]]
- Become familiar with the terminal
  - Be able to perform [[https://github.com/JoshCheek/team_grit/blob/master/cheatsheets_other/shell.md][these katas]] by the end (mechanical practice)
- Become familiar with the OS (Mac?)
  - Practice poweruser keybindings
- Have them create cheatsheets for the primitives (String, Integer, Array, Hash, booleans)
  - [[https://github.com/JoshCheek/ruby-kickstart/tree/master/cheatsheets][example]]
  - Demonstrate an [[http://orgmode.org/worg/org-faq.html#ecm][ECM]] eg to show how map works:
    #+BEGIN_SRC ruby
    ['a', 'b'].map { |c| c.upcase }  # => ["A", "B"]
    #+END_SRC
- Create a linked list using [[https://gist.github.com/JoshCheek/e8dfba74a0ec7e9d8400/53a6c7555284c2d3272bf5638f8d8efc78303ff9#file-15_ways_to_make_a_linked_list-rb-L31][toplevel methods and arrays]], tests will be provided
- Create a linked list using [[https://gist.github.com/JoshCheek/e8dfba74a0ec7e9d8400/53a6c7555284c2d3272bf5638f8d8efc78303ff9#file-15_ways_to_make_a_linked_list-rb-L81][toplevel methods and hashes]], tests will be provided
- [[https://github.com/JoshCheek/object-model-hash-style#objects-are-just-linked-lists][Structure of the Object Model]]
  - Toplevel methods, local variables, callstack, parameters
  - Objects (ivars/class)
  - Classes (superclass/methods/constnats)
*** Week  2 - Ruby in context
- Unix: $PATH, input/output streams, file permissions, executbales
- Ruby: $stdin / $stdout / $stderr / ARGV / ENV
- Unix: environment variables, pipes, redirecting input/output
- Ruby Miniprojects
  - Create [[https://github.com/JoshCheek/team_grit/blob/master/katas/wc.rb][wc]], [[https://github.com/JoshCheek/team_grit/blob/master/katas/echo.rb][echo]], [[https://github.com/JoshCheek/team_grit/blob/master/katas/cat.rb][cat]]
- Namespacing, multiple files in Ruby (load path), naming conventions across files and classes
- [[https://github.com/turingschool/curriculum/blob/master/source/topics/debugging/debugging.markdown#pry][Pry]]
  - Show how to add it to an existing program
  - Practice imporant commands (whereami, show-source, ls, cd)
  - Recognize that the shell / editor keybindings work here as well
  - Create [[https://github.com/JoshCheek/team_grit/blob/master/katas/pwd.rb][pwd]] by exploring in pry (no looking up docs, we have to make guesses and check them to see if they
  - Use pry to explore objects based on what we predict from the object model
- Exploring gems using pry
  - Something like [[https://github.com/JumpstartLab/tdd-class-8-dec/blob/master/12-dec-faker.rb][this]]
- Git fundamentals
  - The basic model to use when thinking
  - My cardinal rule of git: "run git status after everything you do"
  - Practice the commit workflow (I've got it written down somewhere, will have to find it)
  - "Get over yourself" aka commit constantly
- Various [[https://github.com/turingschool/ruby-exercises][ruby exercises]] (probably objects and methods)
  - To practice modeling domains using objects
  - To practice using git to commit
- Maybe refactoring exercises [[https://github.com/JoshCheek/1508/blob/master/katas/blowing_bubbles_part1.rb][material]] video of me doing it https://vimeo.com/137837006
*** Week 3 - Testing and More objects
- [[https://github.com/JoshCheek/how-to-test][Mechanics of testing]] (the hard skills)
  - TODO Do we want to use minitest or RSpec, or don't care?
  - Have them demonstrate they can repeat all the hard skills
- Exploring with pry (to see how feedback is useful, and build intuition)
  - We'll use pry to go in and figure out how minitest runs our tests (if we use RSpec instead, then it's probably not worth it, b/c RSpec is much larger and more sophisticated, not ripe for entry level discovery)
- Discuss how to start a project (bdd) https://gist.github.com/JoshCheek/37e4cf3bea6541023bab
- Show how this manifests in the [[https://github.com/JoshCheek/how-to-test#watch-me-build-a-calculator-in-this-way][mindset of testing]] (the soft skills)
  - How to think about testing
  - What tests to write
  - Watch me do it
  - Students repeat it
  - Demonstrate they can mimic my process and thought patterns
- Use testing and git on a linked list that uses toplevel methods and objects
- Use testing and git on a linked list that moves the methods into the objects
  - This will likely lead to test pain because each test probably uses the interface directly. So we'll get to talk about tdd (in this case, refactor the tests to introduce abstractions, then move the methods 1 at a time)
  - Maybe have them set it aside and go through more [[https://github.com/JoshCheek/1508/blob/master/katas/blowing_bubbles_part2.rb][refactoring exercises]] (video of me doing it https://vimeo.com/137837005)
  - Maybe them do both iterative solutions and recursive solutions, pushing the logic down into the node.
- Object Model: Singleton classes
- [[https://github.com/JoshCheek/programming_is_fun/blob/master/spec/request_spec.rb][HTTP Parser]] (uses streams, strings, testing, and we can define the interface as `ParseHttp.call` which will use singleton classes, and starts prepping them for the web)
*** Week 4 - How to approach a project
- Practice starting a project the way I do
  - Watch me do Chisel (markdown parser) http://tutorials.jumpstartlab.com/projects/chisel.html https://vimeo.com/131588133
  - They attempt to mimic my approach
  - Watch me do chisel again
  - They attempt to mimic my approach again
  - Watch me do chisel again (this time in 20ish minutes)
  - They practice on one they haven't seen me do, [[https://vimeo.com/139372804][Character Count]]
- Project: [[https://github.com/turingschool/lesson_plans/tree/master/electives/building-a-gem][building a gem]] Uses all the stuff they learned last week + the stuff they learned this week, lets us talk about design
*** Week 5 - Modules and Blocks
- Blocks
  - How they work
  - Follow the flow through the program
- Add `each` method to their linked list
- Modules as mixins and namespaces
  - Have them infer the structure from their knowledge of the object model
- Create Enumerable#map together
- Project: create some subset of [[https://vimeo.com/133626457][Enumerable]]
- Include it into their linked list so they can see that they get the `map` methods and so forth
*** Week 6 - HTTP / webservers
(or hashes https://github.com/turingschool/data_structures_and_algorithms/tree/master/hash_tables)
- Webserver project https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me.markdown
- Maybe build a miniature web framework for the server, then show that it works on something like Webrick or Puma, as well (eg https://gist.github.com/JoshCheek/a754fce5d1d5e5bb88a6)
** (2/3) Internet / Rails
- Early Topics::
  - DOM / [[http://www.codecademy.com/en/tracks/web][Codecademy's HTML / CSS track]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/submitting-forms.md][Forms]]
  - MVC
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/html.md][HTML]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/how_the_web_works.markdown][Intro to the web]] Looks like it could be good, so does [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/networking.md][Ada's networking material]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/introduction_to_bootstrap.markdown][Intro to bootstrap]]
  - [[https://github.com/turingschool/challenges/blob/master/parsing_html.markdown][Nokogiri Challenge]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/feature_testing_in_sinatra_with_capybara.markdown][Capybara]] / [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/feature_testing_rails_minitest_rspec.markdown][Feature Testing]] / [[https://gist.github.com/JoshCheek/f71d7d5d749401733a5e][Minimal Testing Example]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/database_design_modeling.markdown][Database Design & Modeling]] / [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/database_schema_design.markdown][Database / Schema design]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/rest_routing_and_controllers_in_rails.markdown][REST]]
  - [[https://github.com/turingschool/challenges/blob/master/models_databases_relationships_routes_controllers_oh_my.markdown][Rails Basics Challenge]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/forms_and_route_helpers_in_rails.markdown][Form and Route helpers]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/sessions_cookies_and_flashes.markdown][Sessions / Cookies / Flashes]] / [[https://gist.github.com/JoshCheek/7b1c1eb231dfa83098be][Decrypting a Rails Session]] / [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/rails/session..md][Ada's sessions]]
  - [[http://guides.rubyonrails.org/action_controller_overview.html#filters][Controller Filters]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/authentication.markdown][Turing's Authentication]] / [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/user-authentication.md][Ada's authentication]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/authorization.markdown][Authorization]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/rails_views_tips_and_techniques.markdown][Rails Views]]
  - Extracting logic from the view/controller/model
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/intro_to_the_asset_pipeline.markdown][Asset Pipeline]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/transactions_scopes_callbacks.markdown][Transactions/callbacks/scopes]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/rails/active_record.md][ActiveRecord]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/rails/active_record_practice.md][ActiveRecord practice]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/carrierwave.md][Carrierwave]]
  - Sqlite / Postgresql
  - Heroku
- Late Topics ::
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/web-api-101.md][API examples]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/consuming-an-api.md][Consuming an API]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/consuming-an-api.md#practice][Consuming an API]]
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/topic_resources/omniauth.md][Authentication w/ Omniauth]]
- Project Ideas::
  - THOUGHT: What if they build their own mini web framework, and then, before learning something in Rails, they add it to their framework? (is there time for that?)
  - Traffic Spy
  - Task Manager
  - Implement sessions
  - Implement Authentication
  - [[https://github.com/Ada-Developers-Academy/C3Projects--bEtsy][Betsy]]
  - [[https://github.com/Ada-Developers-Academy/C3Projects--SeeMore][See More]]

*** Week 7 - Databases / templating languages
- ActiveRecord w/o Rails (SiB, its patterns, db patterns, its interfaces for creating, querying, associating, validating) [[https://gist.github.com/JoshCheek/53877049e76f98447249][example]]
- Enough metaprogramming for AR to not be magic
- ERB in plain Ruby
*** Week 8 - Rails
- High level (what are the pieces, why are they there, how do they fit together?)
- ActiveRecord in Rails (migrations, models)
- Various Rails pieces in isolation [[https://github.com/JoshCheek/playgrounds][Example]]
- Rails project
*** Week 9 -
- APIs
*** Week 10 -
*** Week 11 -
** (3/3) Frontend / Javascript
- Resources ::
  - [[https://github.com/Ada-Developers-Academy/daily-curriculum/blob/f3688db58b98237e6df6602179a7051d65ddd284/cohort_schedules/C03_classroom.md#resources-14][Ada JS resources]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/introduction_to_javascript.markdown][Turing Module 2 Intro to js]]
  - [[https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/introduction_to_jquery.markdown][JQuery]]
- Topics ::
  - JS object model (prototypes, constsructor, local vars, self, callstack, event queue/callbacks)
  -
- Project Ideas ::
  - Linked List in JavaScript
*** Week 12 -
*** Week 13 -
*** Week 14 -
*** Week 15 -
*** Week 16 -

* Available Support
- Companies bringing in support:
  - Pivotal day on tdd / jasmie
  - Hash rocket day or more on varying topics
  - Essential Rails - Jeff Cohen
- Andrea (CS @ Ohio University)

Unless otherwise noted, this curriculum [by Josh Cheek] licensed under - [[http://creativecommons.org/licenses/by-nc-sa/3.0/][Creative Commons Attribution-NonCommercial-ShareAlike 3.0]]
